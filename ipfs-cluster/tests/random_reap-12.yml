name: Background random process stops and restarts
config:
  nodes: {{N}}
  selector: app=ipfs-cluster
  times: 1
  expected:
    successes: {{Y}}
    failures: 0
    timeouts: 0
steps:
  - name: add files to ipfs
    for:
      iter_structure: BOUND
      number: {{Y}}
    cmd: "head -c 100 /dev/urandom | base64 | ipfs add -q"
    selection:
      range:
        order: RANDOM
        number: 1
    outputs:
    - line: 0
      append_to: HASH
  - name: start the stopper...
    selection:
      percent:
        order: RANDOM
        percent: 100
    cmd: "kill -CONT $(cat /data/ipfs-cluster/random-stopper-pid)"
  - name: pin files while potentially being shutdown
    for:
      iter_structure: HASH
    # Three checks
       # 1. contains hash
       # 2. has 3 lines
       # 3. does not contain error
    cmd: "ipfs-cluster-ctl pin add ${HASH[%i]} > /tmp/out.txt &&
          if [[ $(cat /tmp/out.txt) = *${HASH[%i]}* ]] &&
             [[ $(cat /tmp/out.txt) != *error* ]] &&
             [[ $(cat /tmp/out.txt | wc -l) = 3 ]]; then
             echo 'yes';
          else
             echo 'no';
          fi"
    selection:
      range:
        order: RANDOM
        number: 1
    outputs:
    - line: 0
      append_to: SUCCESS
  - name: stop the random-stopper
    selection:
      percent:
        order: RANDOM
        percent: 100
    cmd: "kill -STOP $(cat /data/ipfs-cluster/random-stopper-pid)"
  - name: make sure cluster is running
    selection:
      percent:
        order: RANDOM
        percent: 100
    cmd: "killall -CONT ipfs-cluster-service"
  - name: ensure that all hashes that were pinned successfully are properly replicated in cluster
    for:
      iter_structure: HASH
    selection:
      range:
        order: RANDOM
        number: 1
    cmd: "if [[ ${SUCCESS[%i]} = 'no' ]]; then
            echo 'success';
          else
            ipfs-cluster-ctl --enc json status ${HASH[%i]}
            | jq -r '.peer_map | .[].status' | sort
            | tee /tmp/allout.txt | uniq > /tmp/singleout.txt;

            if [[ $(cat /tmp/singleout.txt) = 'pinned' ]] &&
              [[ $(cat /tmp/allout.txt | wc -l) = '2' ]]; then
              echo 'success';
            else
              echo 'failure';
            fi;
          fi"
    assertions:
      - line: 0
        should_be_equal_to: "success"
